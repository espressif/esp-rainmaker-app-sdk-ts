/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.2
 * source: esp_rmaker_user_mapping.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace rainmaker {
  export enum RMakerConfigStatus {
    Success = 0,
    InvalidParam = 1,
    InvalidState = 2,
  }
  export enum RMakerConfigMsgType {
    TypeCmdSetUserMapping = 0,
    TypeRespSetUserMapping = 1,
  }
  export class CmdSetUserMapping extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            UserID?: string;
            SecretKey?: string;
          }
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("UserID" in data && data.UserID != undefined) {
          this.UserID = data.UserID;
        }
        if ("SecretKey" in data && data.SecretKey != undefined) {
          this.SecretKey = data.SecretKey;
        }
      }
    }
    get UserID() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set UserID(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get SecretKey() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set SecretKey(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      UserID?: string;
      SecretKey?: string;
    }): CmdSetUserMapping {
      const message = new CmdSetUserMapping({});
      if (data.UserID != null) {
        message.UserID = data.UserID;
      }
      if (data.SecretKey != null) {
        message.SecretKey = data.SecretKey;
      }
      return message;
    }
    toObject() {
      const data: {
        UserID?: string;
        SecretKey?: string;
      } = {};
      if (this.UserID != null) {
        data.UserID = this.UserID;
      }
      if (this.SecretKey != null) {
        data.SecretKey = this.SecretKey;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.UserID.length) writer.writeString(1, this.UserID);
      if (this.SecretKey.length) writer.writeString(2, this.SecretKey);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader
    ): CmdSetUserMapping {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new CmdSetUserMapping();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.UserID = reader.readString();
            break;
          case 2:
            message.SecretKey = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CmdSetUserMapping {
      return CmdSetUserMapping.deserialize(bytes);
    }
  }
  export class RespSetUserMapping extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            Status?: RMakerConfigStatus;
            NodeId?: string;
          }
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("Status" in data && data.Status != undefined) {
          this.Status = data.Status;
        }
        if ("NodeId" in data && data.NodeId != undefined) {
          this.NodeId = data.NodeId;
        }
      }
    }
    get Status() {
      return pb_1.Message.getFieldWithDefault(
        this,
        1,
        RMakerConfigStatus.Success
      ) as RMakerConfigStatus;
    }
    set Status(value: RMakerConfigStatus) {
      pb_1.Message.setField(this, 1, value);
    }
    get NodeId() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set NodeId(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      Status?: RMakerConfigStatus;
      NodeId?: string;
    }): RespSetUserMapping {
      const message = new RespSetUserMapping({});
      if (data.Status != null) {
        message.Status = data.Status;
      }
      if (data.NodeId != null) {
        message.NodeId = data.NodeId;
      }
      return message;
    }
    toObject() {
      const data: {
        Status?: RMakerConfigStatus;
        NodeId?: string;
      } = {};
      if (this.Status != null) {
        data.Status = this.Status;
      }
      if (this.NodeId != null) {
        data.NodeId = this.NodeId;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.Status != RMakerConfigStatus.Success)
        writer.writeEnum(1, this.Status);
      if (this.NodeId.length) writer.writeString(2, this.NodeId);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader
    ): RespSetUserMapping {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new RespSetUserMapping();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.Status = reader.readEnum();
            break;
          case 2:
            message.NodeId = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RespSetUserMapping {
      return RespSetUserMapping.deserialize(bytes);
    }
  }
  export class RMakerConfigPayload extends pb_1.Message {
    #one_of_decls: number[][] = [[10, 11]];
    constructor(
      data?:
        | any[]
        | ({
            msg?: RMakerConfigMsgType;
          } & (
            | {
                cmd_set_user_mapping?: CmdSetUserMapping;
                resp_set_user_mapping?: never;
              }
            | {
                cmd_set_user_mapping?: never;
                resp_set_user_mapping?: RespSetUserMapping;
              }
          ))
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("msg" in data && data.msg != undefined) {
          this.msg = data.msg;
        }
        if (
          "cmd_set_user_mapping" in data &&
          data.cmd_set_user_mapping != undefined
        ) {
          this.cmd_set_user_mapping = data.cmd_set_user_mapping;
        }
        if (
          "resp_set_user_mapping" in data &&
          data.resp_set_user_mapping != undefined
        ) {
          this.resp_set_user_mapping = data.resp_set_user_mapping;
        }
      }
    }
    get msg() {
      return pb_1.Message.getFieldWithDefault(
        this,
        1,
        RMakerConfigMsgType.TypeCmdSetUserMapping
      ) as RMakerConfigMsgType;
    }
    set msg(value: RMakerConfigMsgType) {
      pb_1.Message.setField(this, 1, value);
    }
    get cmd_set_user_mapping() {
      return pb_1.Message.getWrapperField(
        this,
        CmdSetUserMapping,
        10
      ) as CmdSetUserMapping;
    }
    set cmd_set_user_mapping(value: CmdSetUserMapping) {
      pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
    }
    get has_cmd_set_user_mapping() {
      return pb_1.Message.getField(this, 10) != null;
    }
    get resp_set_user_mapping() {
      return pb_1.Message.getWrapperField(
        this,
        RespSetUserMapping,
        11
      ) as RespSetUserMapping;
    }
    set resp_set_user_mapping(value: RespSetUserMapping) {
      pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
    }
    get has_resp_set_user_mapping() {
      return pb_1.Message.getField(this, 11) != null;
    }
    get payload() {
      const cases: {
        [index: number]:
          | "none"
          | "cmd_set_user_mapping"
          | "resp_set_user_mapping";
      } = {
        0: "none",
        10: "cmd_set_user_mapping",
        11: "resp_set_user_mapping",
      };
      return cases[pb_1.Message.computeOneofCase(this, [10, 11])];
    }
    static fromObject(data: {
      msg?: RMakerConfigMsgType;
      cmd_set_user_mapping?: ReturnType<
        typeof CmdSetUserMapping.prototype.toObject
      >;
      resp_set_user_mapping?: ReturnType<
        typeof RespSetUserMapping.prototype.toObject
      >;
    }): RMakerConfigPayload {
      const message = new RMakerConfigPayload({});
      if (data.msg != null) {
        message.msg = data.msg;
      }
      if (data.cmd_set_user_mapping != null) {
        message.cmd_set_user_mapping = CmdSetUserMapping.fromObject(
          data.cmd_set_user_mapping
        );
      }
      if (data.resp_set_user_mapping != null) {
        message.resp_set_user_mapping = RespSetUserMapping.fromObject(
          data.resp_set_user_mapping
        );
      }
      return message;
    }
    toObject() {
      const data: {
        msg?: RMakerConfigMsgType;
        cmd_set_user_mapping?: ReturnType<
          typeof CmdSetUserMapping.prototype.toObject
        >;
        resp_set_user_mapping?: ReturnType<
          typeof RespSetUserMapping.prototype.toObject
        >;
      } = {};
      if (this.msg != null) {
        data.msg = this.msg;
      }
      if (this.cmd_set_user_mapping != null) {
        data.cmd_set_user_mapping = this.cmd_set_user_mapping.toObject();
      }
      if (this.resp_set_user_mapping != null) {
        data.resp_set_user_mapping = this.resp_set_user_mapping.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.msg != RMakerConfigMsgType.TypeCmdSetUserMapping)
        writer.writeEnum(1, this.msg);
      if (this.has_cmd_set_user_mapping)
        writer.writeMessage(10, this.cmd_set_user_mapping, () =>
          this.cmd_set_user_mapping.serialize(writer)
        );
      if (this.has_resp_set_user_mapping)
        writer.writeMessage(11, this.resp_set_user_mapping, () =>
          this.resp_set_user_mapping.serialize(writer)
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader
    ): RMakerConfigPayload {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new RMakerConfigPayload();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.msg = reader.readEnum();
            break;
          case 10:
            reader.readMessage(
              message.cmd_set_user_mapping,
              () =>
                (message.cmd_set_user_mapping =
                  CmdSetUserMapping.deserialize(reader))
            );
            break;
          case 11:
            reader.readMessage(
              message.resp_set_user_mapping,
              () =>
                (message.resp_set_user_mapping =
                  RespSetUserMapping.deserialize(reader))
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RMakerConfigPayload {
      return RMakerConfigPayload.deserialize(bytes);
    }
  }
}
