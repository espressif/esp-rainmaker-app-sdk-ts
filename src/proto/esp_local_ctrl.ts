/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.2
 * source: esp_local_ctrl.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./constants";
import * as pb_1 from "google-protobuf";
export enum LocalCtrlMsgType {
  TypeCmdGetPropertyCount = 0,
  TypeRespGetPropertyCount = 1,
  TypeCmdGetPropertyValues = 4,
  TypeRespGetPropertyValues = 5,
  TypeCmdSetPropertyValues = 6,
  TypeRespSetPropertyValues = 7,
}
export class CmdGetPropertyCount extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {}) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
    }
  }
  static fromObject(data: {}): CmdGetPropertyCount {
    const message = new CmdGetPropertyCount(data);
    return message;
  }
  toObject() {
    const data: {} = {};
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(
    bytes: Uint8Array | pb_1.BinaryReader
  ): CmdGetPropertyCount {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new CmdGetPropertyCount();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): CmdGetPropertyCount {
    return CmdGetPropertyCount.deserialize(bytes);
  }
}
export class RespGetPropertyCount extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          status?: dependency_1.Status;
          count?: number;
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("status" in data && data.status != undefined) {
        this.status = data.status;
      }
      if ("count" in data && data.count != undefined) {
        this.count = data.count;
      }
    }
  }
  get status() {
    return pb_1.Message.getFieldWithDefault(
      this,
      1,
      dependency_1.Status.Success
    ) as dependency_1.Status;
  }
  set status(value: dependency_1.Status) {
    pb_1.Message.setField(this, 1, value);
  }
  get count() {
    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
  }
  set count(value: number) {
    pb_1.Message.setField(this, 2, value);
  }
  static fromObject(data: {
    status?: dependency_1.Status;
    count?: number;
  }): RespGetPropertyCount {
    const message = new RespGetPropertyCount({});
    if (data.status != null) {
      message.status = data.status;
    }
    if (data.count != null) {
      message.count = data.count;
    }
    return message;
  }
  toObject() {
    const data: {
      status?: dependency_1.Status;
      count?: number;
    } = {};
    if (this.status != null) {
      data.status = this.status;
    }
    if (this.count != null) {
      data.count = this.count;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.status != dependency_1.Status.Success)
      writer.writeEnum(1, this.status);
    if (this.count != 0) writer.writeUint32(2, this.count);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(
    bytes: Uint8Array | pb_1.BinaryReader
  ): RespGetPropertyCount {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new RespGetPropertyCount();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.status = reader.readEnum();
          break;
        case 2:
          message.count = reader.readUint32();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): RespGetPropertyCount {
    return RespGetPropertyCount.deserialize(bytes);
  }
}
export class PropertyInfo extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          status?: dependency_1.Status;
          name?: string;
          type?: number;
          flags?: number;
          value?: Uint8Array;
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("status" in data && data.status != undefined) {
        this.status = data.status;
      }
      if ("name" in data && data.name != undefined) {
        this.name = data.name;
      }
      if ("type" in data && data.type != undefined) {
        this.type = data.type;
      }
      if ("flags" in data && data.flags != undefined) {
        this.flags = data.flags;
      }
      if ("value" in data && data.value != undefined) {
        this.value = data.value;
      }
    }
  }
  get status() {
    return pb_1.Message.getFieldWithDefault(
      this,
      1,
      dependency_1.Status.Success
    ) as dependency_1.Status;
  }
  set status(value: dependency_1.Status) {
    pb_1.Message.setField(this, 1, value);
  }
  get name() {
    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
  }
  set name(value: string) {
    pb_1.Message.setField(this, 2, value);
  }
  get type() {
    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
  }
  set type(value: number) {
    pb_1.Message.setField(this, 3, value);
  }
  get flags() {
    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
  }
  set flags(value: number) {
    pb_1.Message.setField(this, 4, value);
  }
  get value() {
    return pb_1.Message.getFieldWithDefault(
      this,
      5,
      new Uint8Array(0)
    ) as Uint8Array;
  }
  set value(value: Uint8Array) {
    pb_1.Message.setField(this, 5, value);
  }
  static fromObject(data: {
    status?: dependency_1.Status;
    name?: string;
    type?: number;
    flags?: number;
    value?: Uint8Array;
  }): PropertyInfo {
    const message = new PropertyInfo({});
    if (data.status != null) {
      message.status = data.status;
    }
    if (data.name != null) {
      message.name = data.name;
    }
    if (data.type != null) {
      message.type = data.type;
    }
    if (data.flags != null) {
      message.flags = data.flags;
    }
    if (data.value != null) {
      message.value = data.value;
    }
    return message;
  }
  toObject() {
    const data: {
      status?: dependency_1.Status;
      name?: string;
      type?: number;
      flags?: number;
      value?: Uint8Array;
    } = {};
    if (this.status != null) {
      data.status = this.status;
    }
    if (this.name != null) {
      data.name = this.name;
    }
    if (this.type != null) {
      data.type = this.type;
    }
    if (this.flags != null) {
      data.flags = this.flags;
    }
    if (this.value != null) {
      data.value = this.value;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.status != dependency_1.Status.Success)
      writer.writeEnum(1, this.status);
    if (this.name.length) writer.writeString(2, this.name);
    if (this.type != 0) writer.writeUint32(3, this.type);
    if (this.flags != 0) writer.writeUint32(4, this.flags);
    if (this.value.length) writer.writeBytes(5, this.value);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropertyInfo {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new PropertyInfo();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.status = reader.readEnum();
          break;
        case 2:
          message.name = reader.readString();
          break;
        case 3:
          message.type = reader.readUint32();
          break;
        case 4:
          message.flags = reader.readUint32();
          break;
        case 5:
          message.value = reader.readBytes();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): PropertyInfo {
    return PropertyInfo.deserialize(bytes);
  }
}
export class CmdGetPropertyValues extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          indices?: number[];
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [1],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("indices" in data && data.indices != undefined) {
        this.indices = data.indices;
      }
    }
  }
  get indices() {
    return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
  }
  set indices(value: number[]) {
    pb_1.Message.setField(this, 1, value);
  }
  static fromObject(data: { indices?: number[] }): CmdGetPropertyValues {
    const message = new CmdGetPropertyValues({});
    if (data.indices != null) {
      message.indices = data.indices;
    }
    return message;
  }
  toObject() {
    const data: {
      indices?: number[];
    } = {};
    if (this.indices != null) {
      data.indices = this.indices;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.indices.length) writer.writePackedUint32(1, this.indices);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(
    bytes: Uint8Array | pb_1.BinaryReader
  ): CmdGetPropertyValues {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new CmdGetPropertyValues();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.indices = reader.readPackedUint32();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): CmdGetPropertyValues {
    return CmdGetPropertyValues.deserialize(bytes);
  }
}
export class RespGetPropertyValues extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          status?: dependency_1.Status;
          props?: PropertyInfo[];
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [2],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("status" in data && data.status != undefined) {
        this.status = data.status;
      }
      if ("props" in data && data.props != undefined) {
        this.props = data.props;
      }
    }
  }
  get status() {
    return pb_1.Message.getFieldWithDefault(
      this,
      1,
      dependency_1.Status.Success
    ) as dependency_1.Status;
  }
  set status(value: dependency_1.Status) {
    pb_1.Message.setField(this, 1, value);
  }
  get props() {
    return pb_1.Message.getRepeatedWrapperField(
      this,
      PropertyInfo,
      2
    ) as PropertyInfo[];
  }
  set props(value: PropertyInfo[]) {
    pb_1.Message.setRepeatedWrapperField(this, 2, value);
  }
  static fromObject(data: {
    status?: dependency_1.Status;
    props?: ReturnType<typeof PropertyInfo.prototype.toObject>[];
  }): RespGetPropertyValues {
    const message = new RespGetPropertyValues({});
    if (data.status != null) {
      message.status = data.status;
    }
    if (data.props != null) {
      message.props = data.props.map((item) => PropertyInfo.fromObject(item));
    }
    return message;
  }
  toObject() {
    const data: {
      status?: dependency_1.Status;
      props?: ReturnType<typeof PropertyInfo.prototype.toObject>[];
    } = {};
    if (this.status != null) {
      data.status = this.status;
    }
    if (this.props != null) {
      data.props = this.props.map((item: PropertyInfo) => item.toObject());
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.status != dependency_1.Status.Success)
      writer.writeEnum(1, this.status);
    if (this.props.length)
      writer.writeRepeatedMessage(2, this.props, (item: PropertyInfo) =>
        item.serialize(writer)
      );
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(
    bytes: Uint8Array | pb_1.BinaryReader
  ): RespGetPropertyValues {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new RespGetPropertyValues();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.status = reader.readEnum();
          break;
        case 2:
          reader.readMessage(message.props, () =>
            pb_1.Message.addToRepeatedWrapperField(
              message,
              2,
              PropertyInfo.deserialize(reader),
              PropertyInfo
            )
          );
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): RespGetPropertyValues {
    return RespGetPropertyValues.deserialize(bytes);
  }
}
export class PropertyValue extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          index?: number;
          value?: Uint8Array;
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("index" in data && data.index != undefined) {
        this.index = data.index;
      }
      if ("value" in data && data.value != undefined) {
        this.value = data.value;
      }
    }
  }
  get index() {
    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
  }
  set index(value: number) {
    pb_1.Message.setField(this, 1, value);
  }
  get value() {
    return pb_1.Message.getFieldWithDefault(
      this,
      2,
      new Uint8Array(0)
    ) as Uint8Array;
  }
  set value(value: Uint8Array) {
    pb_1.Message.setField(this, 2, value);
  }
  static fromObject(data: {
    index?: number;
    value?: Uint8Array;
  }): PropertyValue {
    const message = new PropertyValue({});
    if (data.index != null) {
      message.index = data.index;
    }
    if (data.value != null) {
      message.value = data.value;
    }
    return message;
  }
  toObject() {
    const data: {
      index?: number;
      value?: Uint8Array;
    } = {};
    if (this.index != null) {
      data.index = this.index;
    }
    if (this.value != null) {
      data.value = this.value;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.index != 0) writer.writeUint32(1, this.index);
    if (this.value.length) writer.writeBytes(2, this.value);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropertyValue {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new PropertyValue();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.index = reader.readUint32();
          break;
        case 2:
          message.value = reader.readBytes();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): PropertyValue {
    return PropertyValue.deserialize(bytes);
  }
}
export class CmdSetPropertyValues extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          props?: PropertyValue[];
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [1],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("props" in data && data.props != undefined) {
        this.props = data.props;
      }
    }
  }
  get props() {
    return pb_1.Message.getRepeatedWrapperField(
      this,
      PropertyValue,
      1
    ) as PropertyValue[];
  }
  set props(value: PropertyValue[]) {
    pb_1.Message.setRepeatedWrapperField(this, 1, value);
  }
  static fromObject(data: {
    props?: ReturnType<typeof PropertyValue.prototype.toObject>[];
  }): CmdSetPropertyValues {
    const message = new CmdSetPropertyValues({});
    if (data.props != null) {
      message.props = data.props.map((item) => PropertyValue.fromObject(item));
    }
    return message;
  }
  toObject() {
    const data: {
      props?: ReturnType<typeof PropertyValue.prototype.toObject>[];
    } = {};
    if (this.props != null) {
      data.props = this.props.map((item: PropertyValue) => item.toObject());
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.props.length)
      writer.writeRepeatedMessage(1, this.props, (item: PropertyValue) =>
        item.serialize(writer)
      );
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(
    bytes: Uint8Array | pb_1.BinaryReader
  ): CmdSetPropertyValues {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new CmdSetPropertyValues();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.props, () =>
            pb_1.Message.addToRepeatedWrapperField(
              message,
              1,
              PropertyValue.deserialize(reader),
              PropertyValue
            )
          );
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): CmdSetPropertyValues {
    return CmdSetPropertyValues.deserialize(bytes);
  }
}
export class RespSetPropertyValues extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          status?: dependency_1.Status;
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("status" in data && data.status != undefined) {
        this.status = data.status;
      }
    }
  }
  get status() {
    return pb_1.Message.getFieldWithDefault(
      this,
      1,
      dependency_1.Status.Success
    ) as dependency_1.Status;
  }
  set status(value: dependency_1.Status) {
    pb_1.Message.setField(this, 1, value);
  }
  static fromObject(data: {
    status?: dependency_1.Status;
  }): RespSetPropertyValues {
    const message = new RespSetPropertyValues({});
    if (data.status != null) {
      message.status = data.status;
    }
    return message;
  }
  toObject() {
    const data: {
      status?: dependency_1.Status;
    } = {};
    if (this.status != null) {
      data.status = this.status;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.status != dependency_1.Status.Success)
      writer.writeEnum(1, this.status);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(
    bytes: Uint8Array | pb_1.BinaryReader
  ): RespSetPropertyValues {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new RespSetPropertyValues();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.status = reader.readEnum();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): RespSetPropertyValues {
    return RespSetPropertyValues.deserialize(bytes);
  }
}
export class LocalCtrlMessage extends pb_1.Message {
  #one_of_decls: number[][] = [[10, 11, 12, 13, 14, 15]];
  constructor(
    data?:
      | any[]
      | ({
          msg?: LocalCtrlMsgType;
        } & (
          | {
              cmd_get_prop_count?: CmdGetPropertyCount;
              resp_get_prop_count?: never;
              cmd_get_prop_vals?: never;
              resp_get_prop_vals?: never;
              cmd_set_prop_vals?: never;
              resp_set_prop_vals?: never;
            }
          | {
              cmd_get_prop_count?: never;
              resp_get_prop_count?: RespGetPropertyCount;
              cmd_get_prop_vals?: never;
              resp_get_prop_vals?: never;
              cmd_set_prop_vals?: never;
              resp_set_prop_vals?: never;
            }
          | {
              cmd_get_prop_count?: never;
              resp_get_prop_count?: never;
              cmd_get_prop_vals?: CmdGetPropertyValues;
              resp_get_prop_vals?: never;
              cmd_set_prop_vals?: never;
              resp_set_prop_vals?: never;
            }
          | {
              cmd_get_prop_count?: never;
              resp_get_prop_count?: never;
              cmd_get_prop_vals?: never;
              resp_get_prop_vals?: RespGetPropertyValues;
              cmd_set_prop_vals?: never;
              resp_set_prop_vals?: never;
            }
          | {
              cmd_get_prop_count?: never;
              resp_get_prop_count?: never;
              cmd_get_prop_vals?: never;
              resp_get_prop_vals?: never;
              cmd_set_prop_vals?: CmdSetPropertyValues;
              resp_set_prop_vals?: never;
            }
          | {
              cmd_get_prop_count?: never;
              resp_get_prop_count?: never;
              cmd_get_prop_vals?: never;
              resp_get_prop_vals?: never;
              cmd_set_prop_vals?: never;
              resp_set_prop_vals?: RespSetPropertyValues;
            }
        ))
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("msg" in data && data.msg != undefined) {
        this.msg = data.msg;
      }
      if (
        "cmd_get_prop_count" in data &&
        data.cmd_get_prop_count != undefined
      ) {
        this.cmd_get_prop_count = data.cmd_get_prop_count;
      }
      if (
        "resp_get_prop_count" in data &&
        data.resp_get_prop_count != undefined
      ) {
        this.resp_get_prop_count = data.resp_get_prop_count;
      }
      if ("cmd_get_prop_vals" in data && data.cmd_get_prop_vals != undefined) {
        this.cmd_get_prop_vals = data.cmd_get_prop_vals;
      }
      if (
        "resp_get_prop_vals" in data &&
        data.resp_get_prop_vals != undefined
      ) {
        this.resp_get_prop_vals = data.resp_get_prop_vals;
      }
      if ("cmd_set_prop_vals" in data && data.cmd_set_prop_vals != undefined) {
        this.cmd_set_prop_vals = data.cmd_set_prop_vals;
      }
      if (
        "resp_set_prop_vals" in data &&
        data.resp_set_prop_vals != undefined
      ) {
        this.resp_set_prop_vals = data.resp_set_prop_vals;
      }
    }
  }
  get msg() {
    return pb_1.Message.getFieldWithDefault(
      this,
      1,
      LocalCtrlMsgType.TypeCmdGetPropertyCount
    ) as LocalCtrlMsgType;
  }
  set msg(value: LocalCtrlMsgType) {
    pb_1.Message.setField(this, 1, value);
  }
  get cmd_get_prop_count() {
    return pb_1.Message.getWrapperField(
      this,
      CmdGetPropertyCount,
      10
    ) as CmdGetPropertyCount;
  }
  set cmd_get_prop_count(value: CmdGetPropertyCount) {
    pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
  }
  get has_cmd_get_prop_count() {
    return pb_1.Message.getField(this, 10) != null;
  }
  get resp_get_prop_count() {
    return pb_1.Message.getWrapperField(
      this,
      RespGetPropertyCount,
      11
    ) as RespGetPropertyCount;
  }
  set resp_get_prop_count(value: RespGetPropertyCount) {
    pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
  }
  get has_resp_get_prop_count() {
    return pb_1.Message.getField(this, 11) != null;
  }
  get cmd_get_prop_vals() {
    return pb_1.Message.getWrapperField(
      this,
      CmdGetPropertyValues,
      12
    ) as CmdGetPropertyValues;
  }
  set cmd_get_prop_vals(value: CmdGetPropertyValues) {
    pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
  }
  get has_cmd_get_prop_vals() {
    return pb_1.Message.getField(this, 12) != null;
  }
  get resp_get_prop_vals() {
    return pb_1.Message.getWrapperField(
      this,
      RespGetPropertyValues,
      13
    ) as RespGetPropertyValues;
  }
  set resp_get_prop_vals(value: RespGetPropertyValues) {
    pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
  }
  get has_resp_get_prop_vals() {
    return pb_1.Message.getField(this, 13) != null;
  }
  get cmd_set_prop_vals() {
    return pb_1.Message.getWrapperField(
      this,
      CmdSetPropertyValues,
      14
    ) as CmdSetPropertyValues;
  }
  set cmd_set_prop_vals(value: CmdSetPropertyValues) {
    pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
  }
  get has_cmd_set_prop_vals() {
    return pb_1.Message.getField(this, 14) != null;
  }
  get resp_set_prop_vals() {
    return pb_1.Message.getWrapperField(
      this,
      RespSetPropertyValues,
      15
    ) as RespSetPropertyValues;
  }
  set resp_set_prop_vals(value: RespSetPropertyValues) {
    pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
  }
  get has_resp_set_prop_vals() {
    return pb_1.Message.getField(this, 15) != null;
  }
  get payload() {
    const cases: {
      [index: number]:
        | "none"
        | "cmd_get_prop_count"
        | "resp_get_prop_count"
        | "cmd_get_prop_vals"
        | "resp_get_prop_vals"
        | "cmd_set_prop_vals"
        | "resp_set_prop_vals";
    } = {
      0: "none",
      10: "cmd_get_prop_count",
      11: "resp_get_prop_count",
      12: "cmd_get_prop_vals",
      13: "resp_get_prop_vals",
      14: "cmd_set_prop_vals",
      15: "resp_set_prop_vals",
    };
    return cases[pb_1.Message.computeOneofCase(this, [10, 11, 12, 13, 14, 15])];
  }
  static fromObject(data: {
    msg?: LocalCtrlMsgType;
    cmd_get_prop_count?: ReturnType<
      typeof CmdGetPropertyCount.prototype.toObject
    >;
    resp_get_prop_count?: ReturnType<
      typeof RespGetPropertyCount.prototype.toObject
    >;
    cmd_get_prop_vals?: ReturnType<
      typeof CmdGetPropertyValues.prototype.toObject
    >;
    resp_get_prop_vals?: ReturnType<
      typeof RespGetPropertyValues.prototype.toObject
    >;
    cmd_set_prop_vals?: ReturnType<
      typeof CmdSetPropertyValues.prototype.toObject
    >;
    resp_set_prop_vals?: ReturnType<
      typeof RespSetPropertyValues.prototype.toObject
    >;
  }): LocalCtrlMessage {
    const message = new LocalCtrlMessage({});
    if (data.msg != null) {
      message.msg = data.msg;
    }
    if (data.cmd_get_prop_count != null) {
      message.cmd_get_prop_count = CmdGetPropertyCount.fromObject(
        data.cmd_get_prop_count
      );
    }
    if (data.resp_get_prop_count != null) {
      message.resp_get_prop_count = RespGetPropertyCount.fromObject(
        data.resp_get_prop_count
      );
    }
    if (data.cmd_get_prop_vals != null) {
      message.cmd_get_prop_vals = CmdGetPropertyValues.fromObject(
        data.cmd_get_prop_vals
      );
    }
    if (data.resp_get_prop_vals != null) {
      message.resp_get_prop_vals = RespGetPropertyValues.fromObject(
        data.resp_get_prop_vals
      );
    }
    if (data.cmd_set_prop_vals != null) {
      message.cmd_set_prop_vals = CmdSetPropertyValues.fromObject(
        data.cmd_set_prop_vals
      );
    }
    if (data.resp_set_prop_vals != null) {
      message.resp_set_prop_vals = RespSetPropertyValues.fromObject(
        data.resp_set_prop_vals
      );
    }
    return message;
  }
  toObject() {
    const data: {
      msg?: LocalCtrlMsgType;
      cmd_get_prop_count?: ReturnType<
        typeof CmdGetPropertyCount.prototype.toObject
      >;
      resp_get_prop_count?: ReturnType<
        typeof RespGetPropertyCount.prototype.toObject
      >;
      cmd_get_prop_vals?: ReturnType<
        typeof CmdGetPropertyValues.prototype.toObject
      >;
      resp_get_prop_vals?: ReturnType<
        typeof RespGetPropertyValues.prototype.toObject
      >;
      cmd_set_prop_vals?: ReturnType<
        typeof CmdSetPropertyValues.prototype.toObject
      >;
      resp_set_prop_vals?: ReturnType<
        typeof RespSetPropertyValues.prototype.toObject
      >;
    } = {};
    if (this.msg != null) {
      data.msg = this.msg;
    }
    if (this.cmd_get_prop_count != null) {
      data.cmd_get_prop_count = this.cmd_get_prop_count.toObject();
    }
    if (this.resp_get_prop_count != null) {
      data.resp_get_prop_count = this.resp_get_prop_count.toObject();
    }
    if (this.cmd_get_prop_vals != null) {
      data.cmd_get_prop_vals = this.cmd_get_prop_vals.toObject();
    }
    if (this.resp_get_prop_vals != null) {
      data.resp_get_prop_vals = this.resp_get_prop_vals.toObject();
    }
    if (this.cmd_set_prop_vals != null) {
      data.cmd_set_prop_vals = this.cmd_set_prop_vals.toObject();
    }
    if (this.resp_set_prop_vals != null) {
      data.resp_set_prop_vals = this.resp_set_prop_vals.toObject();
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.msg != LocalCtrlMsgType.TypeCmdGetPropertyCount)
      writer.writeEnum(1, this.msg);
    if (this.has_cmd_get_prop_count)
      writer.writeMessage(10, this.cmd_get_prop_count, () =>
        this.cmd_get_prop_count.serialize(writer)
      );
    if (this.has_resp_get_prop_count)
      writer.writeMessage(11, this.resp_get_prop_count, () =>
        this.resp_get_prop_count.serialize(writer)
      );
    if (this.has_cmd_get_prop_vals)
      writer.writeMessage(12, this.cmd_get_prop_vals, () =>
        this.cmd_get_prop_vals.serialize(writer)
      );
    if (this.has_resp_get_prop_vals)
      writer.writeMessage(13, this.resp_get_prop_vals, () =>
        this.resp_get_prop_vals.serialize(writer)
      );
    if (this.has_cmd_set_prop_vals)
      writer.writeMessage(14, this.cmd_set_prop_vals, () =>
        this.cmd_set_prop_vals.serialize(writer)
      );
    if (this.has_resp_set_prop_vals)
      writer.writeMessage(15, this.resp_set_prop_vals, () =>
        this.resp_set_prop_vals.serialize(writer)
      );
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LocalCtrlMessage {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new LocalCtrlMessage();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.msg = reader.readEnum();
          break;
        case 10:
          reader.readMessage(
            message.cmd_get_prop_count,
            () =>
              (message.cmd_get_prop_count =
                CmdGetPropertyCount.deserialize(reader))
          );
          break;
        case 11:
          reader.readMessage(
            message.resp_get_prop_count,
            () =>
              (message.resp_get_prop_count =
                RespGetPropertyCount.deserialize(reader))
          );
          break;
        case 12:
          reader.readMessage(
            message.cmd_get_prop_vals,
            () =>
              (message.cmd_get_prop_vals =
                CmdGetPropertyValues.deserialize(reader))
          );
          break;
        case 13:
          reader.readMessage(
            message.resp_get_prop_vals,
            () =>
              (message.resp_get_prop_vals =
                RespGetPropertyValues.deserialize(reader))
          );
          break;
        case 14:
          reader.readMessage(
            message.cmd_set_prop_vals,
            () =>
              (message.cmd_set_prop_vals =
                CmdSetPropertyValues.deserialize(reader))
          );
          break;
        case 15:
          reader.readMessage(
            message.resp_set_prop_vals,
            () =>
              (message.resp_set_prop_vals =
                RespSetPropertyValues.deserialize(reader))
          );
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): LocalCtrlMessage {
    return LocalCtrlMessage.deserialize(bytes);
  }
}
